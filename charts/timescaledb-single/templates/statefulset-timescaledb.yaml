# This file and its contents are licensed under the Apache License 2.0.
# Please see the included NOTICE for copyright information and LICENSE for a copy of the license.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "timescaledb.fullname" . }}
  labels:
    app: {{ template "timescaledb.fullname" . }}
    chart: {{ template "timescaledb.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    cluster-name: {{ template "clusterName" . }}
spec:
  serviceName: {{ template "timescaledb.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "timescaledb.fullname" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      name: {{ template "timescaledb.fullname" . }}
      labels:
        app: {{ template "timescaledb.fullname" . }}
        release: {{ .Release.Name }}
        cluster-name: {{ template "clusterName" . }}
    spec:
      serviceAccountName: {{ template "timescaledb.serviceAccountName" . }}
      securityContext:
        # The postgres user inside the TimescaleDB image has uid=1000.
        # This configuration ensures the permissions of the mounts are suitable
        fsGroup: 1000
      containers:
      - name: timescaledb
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
          - patroni
          - /etc/patroni/patroni.yaml
        env:
        # We use mixed case environment variables for Patroni User management,
        # as the variable themselves are documented to be PATRONI_<username>_OPTIONS.
        # Where possible, we want to have lowercase usernames in PostgreSQL as more complex postgres usernames
        # requiring quoting to be done in certain contexts, which many tools do not do correctly, or even at all.
        # https://patroni.readthedocs.io/en/latest/ENVIRONMENT.html#bootstrap-configuration
        - name: PATRONI_admin_OPTIONS
          value: createrole,createdb
{{- range $key, $_ := $.Values.credentials }}
        - name: PATRONI_{{ $key }}_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "timescaledb.fullname" $ }}-passwords
              key: {{ $key | quote }}
{{- end }}
        - name: PATRONI_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "timescaledb.fullname" . }}-passwords
              key: standby
        - name: PATRONI_SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "timescaledb.fullname" . }}-passwords
              key: postgres
        - name: PATRONI_REPLICATION_USERNAME
          value: standby
        # To specify the PostgreSQL and Rest API connect addresses we need
        # the PATRONI_KUBERNETES_POD_IP to be available as a bash variable, so we can compose an
        # IP:PORT address later on
        - name: PATRONI_KUBERNETES_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: PATRONI_POSTGRESQL_CONNECT_ADDRESS
          value: "$(PATRONI_KUBERNETES_POD_IP):5432"
        - name: PATRONI_RESTAPI_CONNECT_ADDRESS
          value: "$(PATRONI_KUBERNETES_POD_IP):8008"
        - name: PATRONI_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PATRONI_POSTGRESQL_DATA_DIR
          value: {{ $.Values.persistentVolume.mountPath }}/data
        - name: PATRONI_KUBERNETES_NAMESPACE
          value: {{ $.Release.Namespace }}
        - name: PATRONI_KUBERNETES_LABELS
          value: {{ printf "{app: %s, cluster-name: %s, release: %s}" (include "timescaledb.fullname" .) (include "clusterName" .) .Release.Name  | quote }}
        - name: PATRONI_SCOPE
          value: {{ template "clusterName" . }}
        {{- range $key, $val := (.Values.env | default dict) }}
        - name: {{  $key | quote | upper }}
          value: {{ $val | quote }}
        {{- end }}
        ports:
        - containerPort: 8008
        - containerPort: 5432
        volumeMounts:
        - name: storage-volume
          mountPath: "{{ .Values.persistentVolume.mountPath }}"
          subPath: "{{ .Values.persistentVolume.subPath }}"
        - mountPath: /etc/patroni
          name: patroni-config
          readOnly: true
        - mountPath: /etc/certificate
          name: certificate
          readOnly: true
        resources:
{{ toYaml .Values.resources | indent 10 }}

{{- if .Values.backup.enable }}
      - name: pgbackrest
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/patroni_entrypoint.sh"]
        ports:
        - containerPort: 8081
        volumeMounts:
        - name: storage-volume
          mountPath: "{{ .Values.persistentVolume.mountPath }}"
          subPath: "{{ .Values.persistentVolume.subPath }}"
        env:
          - name: PGB_REPO1_S3_REGION
            value: us-east-2
          - name: K8S_SIDECAR
            value: pgbackrest
          - name: PGBACKREST_CONFIG
            value: {{ printf "%s/backup.pgbackrest.conf" .Values.persistentVolume.mountPath | quote }}
          - name: PGB_REPO1_PATH
            value: "/{{ template "clusterName" . }}/"
          - name: PGB_REPO1_S3_BUCKET
            value: "{{ .Values.backup.s3Bucket }}"
          - name: PGB_REPO1_S3_KEY
            valueFrom:
              secretKeyRef:
                name: "{{ template "timescaledb.fullname" . }}-pgbackrest"
                key: PGB_REPO1_S3_KEY
          - name: PGB_REPO1_S3_KEY_SECRET
            valueFrom:
              secretKeyRef:
                name: "{{ template "timescaledb.fullname" . }}-pgbackrest"
                key: PGB_REPO1_S3_KEY_SECRET
{{ end }}

    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName }}
    {{- end }}
    {{- if .Values.affinity }}
      affinity:
{{ .Values.affinity | toYaml | indent 8 }}
    {{- else if .Values.affinityTemplate }}
      affinity:
{{ tpl .Values.affinityTemplate . | indent 8 }}
    {{- end }}
      volumes:
      - name: patroni-config
        configMap:
          name: {{ template "timescaledb.fullname" . }}-patroni
      - name: certificate
        secret:
          secretName: {{ template "timescaledb.fullname" . }}-certificate
          defaultMode: 416 # 0640 permissions
      {{- if not .Values.persistentVolume.enabled }}
      - name: storage-volume
        emptyDir: {}
      {{- end }}
  {{- if .Values.persistentVolume.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: storage-volume
        annotations:
        {{- if .Values.persistentVolume.annotations }}
{{ toYaml .Values.persistentVolume.annotations | indent 8 }}
        {{- end }}
        labels:
          app: {{ template "timescaledb.fullname" . }}
          release: {{ .Release.Name }}
          heritage: {{ .Release.Service }}
          cluster-name: {{ template "clusterName" . }}
      spec:
        accessModes:
{{ toYaml .Values.persistentVolume.accessModes | indent 8 }}
        resources:
          requests:
            storage: "{{ .Values.persistentVolume.size }}"
      {{- if .Values.persistentVolume.storageClass }}
      {{- if (eq "-" .Values.persistentVolume.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: "{{ .Values.persistentVolume.storageClass }}"
      {{- end }}
      {{- end }}
  {{- end }}
